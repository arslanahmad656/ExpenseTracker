// <auto-generated />
using System;
using ExpenseTracker.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExpenseTracker.App.Migrations
{
    [DbContext(typeof(ExpenseTrackerDbContext))]
    [Migration("20250922083300_008_FormGridView")]
    partial class _008_FormGridView
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExpenseTracker.Entities.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("nvarchar(31)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Code" }, "IX_Currency_Code");

                    b.ToTable("Currency", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "USD",
                            FullName = "US Dollar",
                            Symbol = "$"
                        },
                        new
                        {
                            Id = 2,
                            Code = "EUR",
                            FullName = "Euro",
                            Symbol = "€"
                        },
                        new
                        {
                            Id = 3,
                            Code = "GBP",
                            FullName = "British Pound",
                            Symbol = "£"
                        },
                        new
                        {
                            Id = 4,
                            Code = "INR",
                            FullName = "Indian Rupee",
                            Symbol = "₹"
                        },
                        new
                        {
                            Id = 5,
                            Code = "PKR",
                            FullName = "Pakistani Rupee",
                            Symbol = "₨"
                        });
                });

            modelBuilder.Entity("ExpenseTracker.Entities.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTimeOffset>("HireDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(127)
                        .HasColumnType("nvarchar(127)");

                    b.Property<int>("PrincipalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ManagerId");

                    b.HasIndex("PrincipalId")
                        .IsUnique();

                    b.ToTable("Employee", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "EMP1",
                            HireDate = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Name = "emp1",
                            PrincipalId = 1
                        },
                        new
                        {
                            Id = 2,
                            Code = "EMP2",
                            HireDate = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Name = "emp2",
                            PrincipalId = 2
                        },
                        new
                        {
                            Id = 3,
                            Code = "EMP3",
                            HireDate = new DateTimeOffset(new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Name = "emp3",
                            PrincipalId = 3
                        },
                        new
                        {
                            Id = 4,
                            Code = "EMP4",
                            HireDate = new DateTimeOffset(new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            ManagerId = 1,
                            Name = "emp4",
                            PrincipalId = 4
                        },
                        new
                        {
                            Id = 5,
                            Code = "EMP5",
                            HireDate = new DateTimeOffset(new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            ManagerId = 1,
                            Name = "emp5",
                            PrincipalId = 5
                        },
                        new
                        {
                            Id = 6,
                            Code = "EMP6",
                            HireDate = new DateTimeOffset(new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            ManagerId = 2,
                            Name = "emp6",
                            PrincipalId = 6
                        },
                        new
                        {
                            Id = 7,
                            Code = "EMP7",
                            HireDate = new DateTimeOffset(new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            ManagerId = 2,
                            Name = "emp7",
                            PrincipalId = 7
                        },
                        new
                        {
                            Id = 8,
                            Code = "EMP8",
                            HireDate = new DateTimeOffset(new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            ManagerId = 3,
                            Name = "emp8",
                            PrincipalId = 8
                        },
                        new
                        {
                            Id = 9,
                            Code = "EMP9",
                            HireDate = new DateTimeOffset(new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            ManagerId = 3,
                            Name = "emp9",
                            PrincipalId = 9
                        },
                        new
                        {
                            Id = 10,
                            Code = "ACC1",
                            HireDate = new DateTimeOffset(new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Name = "acc1",
                            PrincipalId = 10
                        },
                        new
                        {
                            Id = 11,
                            Code = "ACC2",
                            HireDate = new DateTimeOffset(new DateTime(2025, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Name = "acc2",
                            PrincipalId = 11
                        },
                        new
                        {
                            Id = 12,
                            Code = "ACC3",
                            HireDate = new DateTimeOffset(new DateTime(2025, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Name = "acc3",
                            PrincipalId = 12
                        },
                        new
                        {
                            Id = 13,
                            Code = "ACC4",
                            HireDate = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Name = "acc4",
                            PrincipalId = 13
                        },
                        new
                        {
                            Id = 14,
                            Code = "ACC5",
                            HireDate = new DateTimeOffset(new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Name = "acc5",
                            PrincipalId = 14
                        },
                        new
                        {
                            Id = 15,
                            Code = "ACC6",
                            HireDate = new DateTimeOffset(new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Name = "acc6",
                            PrincipalId = 15
                        },
                        new
                        {
                            Id = 16,
                            Code = "ACC7",
                            HireDate = new DateTimeOffset(new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Name = "acc7",
                            PrincipalId = 16
                        },
                        new
                        {
                            Id = 17,
                            Code = "ACC8",
                            HireDate = new DateTimeOffset(new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Name = "acc8",
                            PrincipalId = 17
                        },
                        new
                        {
                            Id = 18,
                            Code = "ACC9",
                            HireDate = new DateTimeOffset(new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Name = "acc9",
                            PrincipalId = 18
                        },
                        new
                        {
                            Id = 19,
                            Code = "ADM1",
                            HireDate = new DateTimeOffset(new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Name = "adm1",
                            PrincipalId = 19
                        },
                        new
                        {
                            Id = 20,
                            Code = "ADM2",
                            HireDate = new DateTimeOffset(new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Name = "adm2",
                            PrincipalId = 20
                        },
                        new
                        {
                            Id = 21,
                            Code = "ADM3",
                            HireDate = new DateTimeOffset(new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Name = "adm3",
                            PrincipalId = 21
                        },
                        new
                        {
                            Id = 22,
                            Code = "ADM4",
                            HireDate = new DateTimeOffset(new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Name = "adm4",
                            PrincipalId = 22
                        },
                        new
                        {
                            Id = 23,
                            Code = "ADM5",
                            HireDate = new DateTimeOffset(new DateTime(2025, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Name = "adm5",
                            PrincipalId = 23
                        });
                });

            modelBuilder.Entity("ExpenseTracker.Entities.Models.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TrackingId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("TrackingId")
                        .IsUnique();

                    b.ToTable("Expense", null, t =>
                        {
                            t.HasCheckConstraint("CK_Expense_Amount_GreaterThanZero", "[AMOUNT] > 0");
                        });
                });

            modelBuilder.Entity("ExpenseTracker.Entities.Models.ExpenseHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<string>("CurrentState")
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.Property<int>("ExpenseId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PreviousState")
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.Property<DateTimeOffset>("RecordedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("ExpenseId");

                    b.ToTable("ExpenseHistory", (string)null);
                });

            modelBuilder.Entity("ExpenseTracker.Entities.Models.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("nvarchar(63)");

                    b.Property<string>("TrackingId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("TrackingId")
                        .IsUnique();

                    b.ToTable("Form", (string)null);
                });

            modelBuilder.Entity("ExpenseTracker.Entities.Models.FormHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<string>("CurrentState")
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PreviousState")
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.Property<DateTimeOffset>("RecordedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("FormId");

                    b.ToTable("FormHistory", (string)null);
                });

            modelBuilder.Entity("ExpenseTracker.Entities.Models.LoginHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IPAddress")
                        .HasMaxLength(31)
                        .HasColumnType("nvarchar(31)");

                    b.Property<DateTimeOffset?>("LoginTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LogoutTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId");

                    b.ToTable("LoginHistory", (string)null);
                });

            modelBuilder.Entity("ExpenseTracker.Entities.Models.Principal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(127)
                        .HasColumnType("nvarchar(127)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("nvarchar(31)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Principal", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            PasswordHash = "$2a$11$BcmWuSKqCzwxqaID7uyke.zEsmY5EPaQbXRAEaIzbhUG6nkIDbt4e",
                            Username = "emp1"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = false,
                            PasswordHash = "$2a$11$BcmWuSKqCzwxqaID7uyke.zEsmY5EPaQbXRAEaIzbhUG6nkIDbt4e",
                            Username = "emp2"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            PasswordHash = "$2a$11$BcmWuSKqCzwxqaID7uyke.zEsmY5EPaQbXRAEaIzbhUG6nkIDbt4e",
                            Username = "emp3"
                        },
                        new
                        {
                            Id = 4,
                            IsActive = false,
                            PasswordHash = "$2a$11$BcmWuSKqCzwxqaID7uyke.zEsmY5EPaQbXRAEaIzbhUG6nkIDbt4e",
                            Username = "emp4"
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            PasswordHash = "$2a$11$BcmWuSKqCzwxqaID7uyke.zEsmY5EPaQbXRAEaIzbhUG6nkIDbt4e",
                            Username = "emp5"
                        },
                        new
                        {
                            Id = 6,
                            IsActive = false,
                            PasswordHash = "$2a$11$BcmWuSKqCzwxqaID7uyke.zEsmY5EPaQbXRAEaIzbhUG6nkIDbt4e",
                            Username = "emp6"
                        },
                        new
                        {
                            Id = 7,
                            IsActive = true,
                            PasswordHash = "$2a$11$BcmWuSKqCzwxqaID7uyke.zEsmY5EPaQbXRAEaIzbhUG6nkIDbt4e",
                            Username = "emp7"
                        },
                        new
                        {
                            Id = 8,
                            IsActive = false,
                            PasswordHash = "$2a$11$BcmWuSKqCzwxqaID7uyke.zEsmY5EPaQbXRAEaIzbhUG6nkIDbt4e",
                            Username = "emp8"
                        },
                        new
                        {
                            Id = 9,
                            IsActive = true,
                            PasswordHash = "$2a$11$BcmWuSKqCzwxqaID7uyke.zEsmY5EPaQbXRAEaIzbhUG6nkIDbt4e",
                            Username = "emp9"
                        },
                        new
                        {
                            Id = 10,
                            IsActive = false,
                            PasswordHash = "$2a$11$BcmWuSKqCzwxqaID7uyke.zEsmY5EPaQbXRAEaIzbhUG6nkIDbt4e",
                            Username = "acc1"
                        },
                        new
                        {
                            Id = 11,
                            IsActive = true,
                            PasswordHash = "$2a$11$BcmWuSKqCzwxqaID7uyke.zEsmY5EPaQbXRAEaIzbhUG6nkIDbt4e",
                            Username = "acc2"
                        },
                        new
                        {
                            Id = 12,
                            IsActive = false,
                            PasswordHash = "$2a$11$BcmWuSKqCzwxqaID7uyke.zEsmY5EPaQbXRAEaIzbhUG6nkIDbt4e",
                            Username = "acc3"
                        },
                        new
                        {
                            Id = 13,
                            IsActive = true,
                            PasswordHash = "$2a$11$BcmWuSKqCzwxqaID7uyke.zEsmY5EPaQbXRAEaIzbhUG6nkIDbt4e",
                            Username = "acc4"
                        },
                        new
                        {
                            Id = 14,
                            IsActive = false,
                            PasswordHash = "$2a$11$BcmWuSKqCzwxqaID7uyke.zEsmY5EPaQbXRAEaIzbhUG6nkIDbt4e",
                            Username = "acc5"
                        },
                        new
                        {
                            Id = 15,
                            IsActive = true,
                            PasswordHash = "$2a$11$BcmWuSKqCzwxqaID7uyke.zEsmY5EPaQbXRAEaIzbhUG6nkIDbt4e",
                            Username = "acc6"
                        },
                        new
                        {
                            Id = 16,
                            IsActive = false,
                            PasswordHash = "$2a$11$BcmWuSKqCzwxqaID7uyke.zEsmY5EPaQbXRAEaIzbhUG6nkIDbt4e",
                            Username = "acc7"
                        },
                        new
                        {
                            Id = 17,
                            IsActive = true,
                            PasswordHash = "$2a$11$BcmWuSKqCzwxqaID7uyke.zEsmY5EPaQbXRAEaIzbhUG6nkIDbt4e",
                            Username = "acc8"
                        },
                        new
                        {
                            Id = 18,
                            IsActive = false,
                            PasswordHash = "$2a$11$BcmWuSKqCzwxqaID7uyke.zEsmY5EPaQbXRAEaIzbhUG6nkIDbt4e",
                            Username = "acc9"
                        },
                        new
                        {
                            Id = 19,
                            IsActive = true,
                            PasswordHash = "$2a$11$BcmWuSKqCzwxqaID7uyke.zEsmY5EPaQbXRAEaIzbhUG6nkIDbt4e",
                            Username = "adm1"
                        },
                        new
                        {
                            Id = 20,
                            IsActive = false,
                            PasswordHash = "$2a$11$BcmWuSKqCzwxqaID7uyke.zEsmY5EPaQbXRAEaIzbhUG6nkIDbt4e",
                            Username = "adm2"
                        },
                        new
                        {
                            Id = 21,
                            IsActive = true,
                            PasswordHash = "$2a$11$BcmWuSKqCzwxqaID7uyke.zEsmY5EPaQbXRAEaIzbhUG6nkIDbt4e",
                            Username = "adm3"
                        },
                        new
                        {
                            Id = 22,
                            IsActive = false,
                            PasswordHash = "$2a$11$BcmWuSKqCzwxqaID7uyke.zEsmY5EPaQbXRAEaIzbhUG6nkIDbt4e",
                            Username = "adm4"
                        },
                        new
                        {
                            Id = 23,
                            IsActive = true,
                            PasswordHash = "$2a$11$BcmWuSKqCzwxqaID7uyke.zEsmY5EPaQbXRAEaIzbhUG6nkIDbt4e",
                            Username = "adm5"
                        });
                });

            modelBuilder.Entity("ExpenseTracker.Entities.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("nvarchar(31)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Employee",
                            Priority = 3
                        },
                        new
                        {
                            Id = 2,
                            Name = "Manager",
                            Priority = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Accountant",
                            Priority = 4
                        },
                        new
                        {
                            Id = 4,
                            Name = "Administrator",
                            Priority = 1
                        });
                });

            modelBuilder.Entity("ExpenseTracker.Entities.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PrincipalId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("PrincipalId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PrincipalId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            PrincipalId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            PrincipalId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            PrincipalId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            PrincipalId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 6,
                            PrincipalId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 7,
                            PrincipalId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 8,
                            PrincipalId = 8,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 9,
                            PrincipalId = 9,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 10,
                            PrincipalId = 10,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 11,
                            PrincipalId = 11,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 12,
                            PrincipalId = 12,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 13,
                            PrincipalId = 13,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 14,
                            PrincipalId = 14,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 15,
                            PrincipalId = 15,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 16,
                            PrincipalId = 16,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 17,
                            PrincipalId = 17,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 18,
                            PrincipalId = 18,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 19,
                            PrincipalId = 19,
                            RoleId = 4
                        },
                        new
                        {
                            Id = 20,
                            PrincipalId = 20,
                            RoleId = 4
                        },
                        new
                        {
                            Id = 21,
                            PrincipalId = 21,
                            RoleId = 4
                        },
                        new
                        {
                            Id = 22,
                            PrincipalId = 22,
                            RoleId = 4
                        },
                        new
                        {
                            Id = 23,
                            PrincipalId = 23,
                            RoleId = 4
                        },
                        new
                        {
                            Id = 24,
                            PrincipalId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 25,
                            PrincipalId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 26,
                            PrincipalId = 3,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("ExpenseTracker.Entities.Models.Views.FormGridView", b =>
                {
                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingId")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("FormGridView", (string)null);

                    b.ToView("vw_FormGrid", (string)null);
                });

            modelBuilder.Entity("ExpenseTracker.Entities.Models.Employee", b =>
                {
                    b.HasOne("ExpenseTracker.Entities.Models.Employee", "Manager")
                        .WithMany("DirectReports")
                        .HasForeignKey("ManagerId");

                    b.HasOne("ExpenseTracker.Entities.Models.Principal", "Principal")
                        .WithOne("Employee")
                        .HasForeignKey("ExpenseTracker.Entities.Models.Employee", "PrincipalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Principal");
                });

            modelBuilder.Entity("ExpenseTracker.Entities.Models.Expense", b =>
                {
                    b.HasOne("ExpenseTracker.Entities.Models.Form", "Form")
                        .WithMany("Expenses")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("ExpenseTracker.Entities.Models.ExpenseHistory", b =>
                {
                    b.HasOne("ExpenseTracker.Entities.Models.Employee", "Actor")
                        .WithMany("ExpenseHistories")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExpenseTracker.Entities.Models.Expense", "Expense")
                        .WithMany("ExpenseHistories")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Expense");
                });

            modelBuilder.Entity("ExpenseTracker.Entities.Models.Form", b =>
                {
                    b.HasOne("ExpenseTracker.Entities.Models.Currency", "Currency")
                        .WithMany("Forms")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("ExpenseTracker.Entities.Models.FormHistory", b =>
                {
                    b.HasOne("ExpenseTracker.Entities.Models.Employee", "Actor")
                        .WithMany("FormHistories")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExpenseTracker.Entities.Models.Form", "Form")
                        .WithMany("FormHistories")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Form");
                });

            modelBuilder.Entity("ExpenseTracker.Entities.Models.LoginHistory", b =>
                {
                    b.HasOne("ExpenseTracker.Entities.Models.UserRole", "UserRole")
                        .WithMany("LoginHistories")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("ExpenseTracker.Entities.Models.UserRole", b =>
                {
                    b.HasOne("ExpenseTracker.Entities.Models.Principal", "Principal")
                        .WithMany("UserRoles")
                        .HasForeignKey("PrincipalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExpenseTracker.Entities.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Principal");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ExpenseTracker.Entities.Models.Currency", b =>
                {
                    b.Navigation("Forms");
                });

            modelBuilder.Entity("ExpenseTracker.Entities.Models.Employee", b =>
                {
                    b.Navigation("DirectReports");

                    b.Navigation("ExpenseHistories");

                    b.Navigation("FormHistories");
                });

            modelBuilder.Entity("ExpenseTracker.Entities.Models.Expense", b =>
                {
                    b.Navigation("ExpenseHistories");
                });

            modelBuilder.Entity("ExpenseTracker.Entities.Models.Form", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("FormHistories");
                });

            modelBuilder.Entity("ExpenseTracker.Entities.Models.Principal", b =>
                {
                    b.Navigation("Employee");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ExpenseTracker.Entities.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ExpenseTracker.Entities.Models.UserRole", b =>
                {
                    b.Navigation("LoginHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
