using System.Text.RegularExpressions;

namespace ExpenseTracker.Repository.Configuration;

/// <summary>
/// Helper class to generate test data for principals (employees, accountants, admins).
/// </summary>
/// <remarks>
/// Do not change the implementation of the methods in this class as the test cases depend on the data generated by these methods.
/// </remarks>
public static class Helper
{
    private static Dictionary<string, List<string>> GetHierarchy(string prefix)
        => new List<(string Manager, List<string> Reports)>
        {
            ("1", ["4", "5"]),
            ("2", ["6", "7"]),
            ("3", ["8", "9"]),
        }.ToDictionary(t => $"{prefix}{t.Manager}", t => t.Reports.Select(r => $"{prefix}{r}").ToList());

    private static List<string> GetFlat(string prefix, int count)
        => [.. Enumerable.Range(1, count).Select(i => $"{prefix}{i}")];

    public static (IEnumerable<string> Employees, IEnumerable<string> Accountants, IEnumerable<string> Admins) GetPrincipals()
    {
        var employeesHeirarchy = Helper.GetHierarchy("emp");
        var employees = employeesHeirarchy
            .Select(kv => kv.Key)
            .Concat(employeesHeirarchy.SelectMany(kv => kv.Value));

        var accountantsHierarchy = Helper.GetHierarchy("acc");
        var accountants = accountantsHierarchy
            .Select(kv => kv.Key)
            .Concat(accountantsHierarchy.SelectMany(kv => kv.Value));

        var admins = Helper.GetFlat("adm", 5);

        return (employees, accountants, admins);
    }

    public static int GetIdFromUsername(string username) => int.Parse(new Regex(@"\d+$").Match(username).Value);

    public static DateTime GenerateRandomDate()
    {
        var random = new Random();
        var startDate = new DateTime(2025, 1, 1);
        var endDate = new DateTime(2025, 8, 1);

        int rangeInDays = (endDate - startDate).Days;
        int randomDays = random.Next(0, rangeInDays + 1);

        DateTime randomDate = startDate.AddDays(randomDays);

        return randomDate;
    }
}
